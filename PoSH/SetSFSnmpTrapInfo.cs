#region Copyright
/*
* Copyright 2014-2016 NetApp, Inc. All Rights Reserved.
*
* CONFIDENTIALITY NOTICE: THIS SOFTWARE CONTAINS CONFIDENTIAL INFORMATION OF
* NETAPP, INC. USE, DISCLOSURE OR REPRODUCTION IS PROHIBITED WITHOUT THE PRIOR
* EXPRESS WRITTEN PERMISSION OF NETAPP, INC.
*/
#endregion


#region Using Directives
using System;
using System.Linq;
using System.ComponentModel;
using System.Management.Automation;
using SolidFire.Core;
using SolidFire.Element.Api;
#endregion

namespace SolidFire.element
{
	/// <summary>
	/// SetSnmpTrapInfo is used to enable and disable the generation of SolidFire SNMP notifications (traps) and to specify the set of network host computers that are to receive the notifications. The values passed with each SetSnmpTrapInfo method replaces all values set in any previous method to SetSnmpTrapInfo.
	/// </summary>
	[RunInstaller(true)]
	[Cmdlet(VerbsCommon.Set, "SFSnmpTrapInfo")]
	public class SetSnmpTrapInfo : SFCmdlet
	{
		#region Private Data
		/// <summary>
		/// List of hosts that are to receive the traps generated by the Cluster Master. At least one object is required if any one of the trap types is enabled.
		/// </summary>
		private SnmpTrapRecipient[] _trapRecipients;
		/// <summary>
		/// If "true", when a cluster fault is logged a corresponding solidFireClusterFaultNotification is sent to the configured list of trap recipients.
		/// </summary>
		private boolean _clusterFaultTrapsEnabled;
		/// <summary>
		/// If "true", when a cluster fault is logged a corresponding solidFireClusterFaultResolvedNotification is sent to the configured list of trap recipients.
		/// </summary>
		private boolean _clusterFaultResolvedTrapsEnabled;
		/// <summary>
		/// If "true", when a cluster fault is logged a corresponding solidFireClusterEventNotification is sent to the configured list of trap recipients.
		/// </summary>
		private boolean _clusterEventTrapsEnabled;
		#endregion
		
		#region Parameters
		[Parameter(HelpMessage = "List of hosts that are to receive the traps generated by the Cluster Master. At least one object is required if any one of the trap types is enabled.")]
		public SnmpTrapRecipient[] TrapRecipients
		{
			get
			{
				return _trapRecipients;
			}
			set
			{
				_trapRecipients = value;
			}
		}
		[Parameter(HelpMessage = "If \"true\", when a cluster fault is logged a corresponding solidFireClusterFaultNotification is sent to the configured list of trap recipients.")]
		public boolean ClusterFaultTrapsEnabled
		{
			get
			{
				return _clusterFaultTrapsEnabled;
			}
			set
			{
				_clusterFaultTrapsEnabled = value;
			}
		}
		[Parameter(HelpMessage = "If \"true\", when a cluster fault is logged a corresponding solidFireClusterFaultResolvedNotification is sent to the configured list of trap recipients.")]
		public boolean ClusterFaultResolvedTrapsEnabled
		{
			get
			{
				return _clusterFaultResolvedTrapsEnabled;
			}
			set
			{
				_clusterFaultResolvedTrapsEnabled = value;
			}
		}
		[Parameter(HelpMessage = "If \"true\", when a cluster fault is logged a corresponding solidFireClusterEventNotification is sent to the configured list of trap recipients.")]
		public boolean ClusterEventTrapsEnabled
		{
			get
			{
				return _clusterEventTrapsEnabled;
			}
			set
			{
				_clusterEventTrapsEnabled = value;
			}
		}
		#endregion
		
		#region Cmdlet Overrides
		protected override void BeginProcessing()
		{
			base.BeginProcessing();
			CheckConnection(5);
		}

		protected override void ProcessRecord()
		{
			base.ProcessRecord();
			var request = new SetSnmpTrapInfoRequest();
			request.TrapRecipients = _trapRecipients;
			request.ClusterFaultTrapsEnabled = _clusterFaultTrapsEnabled;
			request.ClusterFaultResolvedTrapsEnabled = _clusterFaultResolvedTrapsEnabled;
			request.ClusterEventTrapsEnabled = _clusterEventTrapsEnabled;
			var objsFromAPI = SendRequest<SetSnmpTrapInfoResult>("SetSnmpTrapInfo", request);
			WriteObject(objsFromAPI.Select(obj => obj.Result), true);
		}
		#endregion
	}
}
		